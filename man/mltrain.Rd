% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/baselearner.R
\name{mltrain}
\alias{mltrain}
\alias{mltrain.baseC4.5}
\alias{mltrain.baseC5.0}
\alias{mltrain.baseCART}
\alias{mltrain.baseJ48}
\alias{mltrain.baseKNN}
\alias{mltrain.baseNB}
\alias{mltrain.baseRF}
\alias{mltrain.baseSVM}
\alias{mltrain.default}
\title{Train function to extend base classifiers}
\usage{
mltrain(dataset, ...)

\method{mltrain}{default}(dataset, ...)

\method{mltrain}{baseSVM}(dataset, ...)

\method{mltrain}{baseJ48}(dataset, ...)

\method{mltrain}{baseC4.5}(dataset, ...)

\method{mltrain}{baseC5.0}(dataset, ...)

\method{mltrain}{baseCART}(dataset, ...)

\method{mltrain}{baseRF}(dataset, ...)

\method{mltrain}{baseNB}(dataset, ...)

\method{mltrain}{baseKNN}(dataset, ...)
}
\arguments{
\item{dataset}{An object of \code{mltransformation} class, that has at least
four attributes: \strong{data}, \strong{labelname}, \strong{labelindex} and
\strong{methodname}. The \code{data} is the dataframe with the predictive
attributes and the class column. The \code{labelname} is the name of the
class column. The \code{labelindex} is the column number of the class.
 Finally, the \code{methodname} is the name of the implemented method.}

\item{...}{Others arguments passed to the base method.}
}
\value{
A model object. The class of this model can be of any type, however,
 this object will be passed to the respective mlpredict method.
}
\description{
To extend a base classifier, two steps are necessary:
 \enumerate{
   \item Create a train method
   \item Create a prediction method
 }
 This section is about how to create a train method. To create a new predict
 model see \code{\link{mlpredict}} documentation.
}
\section{Methods (by class)}{
\itemize{
\item \code{default}: Default S3 method

\item \code{baseSVM}: SVM implementation (require \pkg{e1071} package to use)

\item \code{baseJ48}: J48 implementation (require \pkg{RWeka} package to use)

\item \code{baseC4.5}: C4.5 implementation (require \pkg{RWeka} package to use)

\item \code{baseC5.0}: C5.0 implementation (require \pkg{C50} package to use)

\item \code{baseCART}: CART implementation (require \pkg{rpart} package to use)

\item \code{baseRF}: Random Forest (RF) implementation (require \pkg{randomForest} package to use)

\item \code{baseNB}: Naive Bayes (NB) implementation (require \pkg{e1071} package to use)

\item \code{baseKNN}: kNN implementation (require \pkg{kknn} package to use)
}}
\section{How to create a new train base method}{

Fist is necessary to define a name of your classifier because this name
determine the method name, that must start with mltrain.base followed by your
name, e.g. a "foo" classify must be \code{mltrain.basefoo}.

After defined the name, you need to implement your base method. The dataset
is available on \code{dataset$base}. In the examples there are some ways to
implement this method.
}
\examples{
# Create a empty model of type foo
mltrain.basefoo <- function (dataset, ...) {
   mymodel <- list()
   class(mymodel) <- "foomodel"
   mymodel
}

#Use this base method with Binary Relevance
brmodel <- br(emotions, "foo")

# Create a SVM method using the e1071 package
library(e1071)
mltrain.baseSVM <- function (dataset, ...) {
   traindata <- dataset$data[, -dataset$labelindex]
   labeldata <- dataset$data[, dataset$labelindex]
   model <- svm(traindata, labeldata, probability = TRUE, ...)
   model
}
}

