% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/baselearner.R
\name{mlpredict}
\alias{mlpredict}
\alias{mlpredict.C5.0}
\alias{mlpredict.J48}
\alias{mlpredict.baseKNN}
\alias{mlpredict.default}
\alias{mlpredict.naiveBayes}
\alias{mlpredict.randomForest}
\alias{mlpredict.rpart}
\alias{mlpredict.svm}
\title{Prediction function to extend base classifiers}
\usage{
mlpredict(model, newdata, ...)

\method{mlpredict}{default}(model, newdata, ...)

\method{mlpredict}{svm}(model, newdata, ...)

\method{mlpredict}{J48}(model, newdata, ...)

\method{mlpredict}{C5.0}(model, newdata, ...)

\method{mlpredict}{rpart}(model, newdata, ...)

\method{mlpredict}{randomForest}(model, newdata, ...)

\method{mlpredict}{naiveBayes}(model, newdata, ...)

\method{mlpredict}{baseKNN}(model, newdata, ...)
}
\arguments{
\item{model}{An object model returned by some mltrain method, its class
determine the name of this method.}

\item{newdata}{A dataframe with the new data to be predicted}

\item{...}{Others arguments passed to the predict method.}
}
\value{
An object of the type "\code{mlresult}". Use the
 \code{\link{as.binaryPrediction}} to return the prediction result
}
\description{
To extend a base classifier, two steps are necessary:
 \enumerate{
   \item Create a train method
   \item Create a prediction method
 }
 This section is about how to create a prediction method. To create a new train
 method see \code{\link{mltrain}} documentation.
}
\section{Methods (by class)}{
\itemize{
\item \code{default}: Default S3 method

\item \code{svm}: SVM implementation (require \pkg{e1071} package to use)

\item \code{J48}: C4.5/J48 implementation (require \pkg{RWeka} package to use)

\item \code{C5.0}: C5.0 implementation (require \pkg{C50} package to use)

\item \code{rpart}: CART implementation (require \pkg{rpart} package to use)

\item \code{randomForest}: Random Forest (RF) implementation (require \pkg{randomForest} package to use)

\item \code{naiveBayes}: Naive Bayes (NB) implementation (require \pkg{e1071} package to use)

\item \code{baseKNN}: kNN implementation (require \pkg{class} package to use)
}}
\section{How to create a new prediction base method}{

Fist is necessary to know the class of model generate by respective train method
because this name determine the method name, that must start with mlpredict.
followed by the model class name, e.g. a model with class "foomodel" must be
\code{mlpredict.foomodel}.

After defined the name, you need to implement your prediction base method. The
model is available on \code{model} parameter and the new data to predict
\code{newdata}. In the examples there are some ways to implement this method.

The return of this method must be provided by the
\code{\link{as.binaryPrediction}} method.
}
\examples{
# Create a method that predict always the negative class (The model must be the class "negativemodel")
mlpredict.negativemodel <- function (model, newdata, ...) {
   preds <- rep(0, nrow(newdata))
   as.binaryPrediction(preds)
}

# Create a SVM predict method using the e1071 package (the class of SVM model from e1071 package is "svm")
library(e1071)
mlpredict.svm <- function (dataset, ...) {
   result <- predict(model, newdata, probability = TRUE, ...)
   as.biinaryPrediction(attr(result, "probabilities")[,"1"])
}
}

